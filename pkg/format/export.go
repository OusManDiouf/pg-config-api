package format

import (
	"bytes"
	"fmt"
	"strings"

	"github.com/pgconfig/api/pkg/category"
	"github.com/pgconfig/api/pkg/version"
)

// ExportFormat Defines the type that will export the tuned profile
type ExportFormat string

const (
	// JSON is the export format for the tuned profile
	JSON ExportFormat = "json"
	// Config is the export format for the tuned profile
	Config ExportFormat = "conf"
	// UNIX is the export format for the tuned profile
	UNIX ExportFormat = "unix"
	// AlterSystemFormat is the export format for the tuned profile
	AlterSystemFormat ExportFormat = "alter_system"
	// SQL is the export format for the tuned profile
	SQL ExportFormat = "sql"
	// StackGres is the export format for the tuned profile
	StackGres ExportFormat = "stackgres"
	// StackGresShort is the export format for the tuned profile
	StackGresShort ExportFormat = "sg"
	// SGPGConfig is the export format for the tuned profile
	SGPGConfig ExportFormat = "sgpostgresconfig"
	// YAML is the export format for the tuned profile
	YAML ExportFormat = "yaml"
)

// AllExportFormats Lists all of the export options available
var AllExportFormats = []ExportFormat{JSON, Config, UNIX, AlterSystemFormat, SQL, StackGres, StackGresShort, SGPGConfig, YAML}

// String is used both by fmt.Print and by Cobra in help text
func (e *ExportFormat) String() string {
	return string(*e)
}

// Set must have pointer receiver so it doesn't change the value of a copy
func (e *ExportFormat) Set(v string) error {

	newV := ExportFormat(strings.ToLower(v))

	switch newV {
	case JSON, Config, UNIX, AlterSystemFormat, SQL, StackGres, StackGresShort, SGPGConfig, YAML:
		*e = newV
		return nil
	default:
		return fmt.Errorf("must be one of %v", AllExportFormats)
	}
}

// Type is only used in help text
func (e *ExportFormat) Type() string {
	return "ExportFormat"
}

// ExportConf exports the categories
// Some profiles - such stackgres needs the pgversion so it may be mandatory
//
func ExportConf(f ExportFormat, output []category.SliceOutput, pgVersion float32, extra []string) string {

	var comment string

	switch f {
	case AlterSystemFormat, SQL:
		comment = "--"
	default:
		comment = "#"
	}

	var b bytes.Buffer

	switch f {
	case StackGres, StackGresShort, SGPGConfig, YAML:
		b.WriteString("---\n")
	}

	if f != JSON {
		b.WriteString(fmt.Sprintf("%s Generated by PGConfig %s\n", fillComment(1, comment), version.Pretty()))
		if len(extra) > 0 {
			for i := 0; i < len(extra); i++ {
				b.WriteString((fmt.Sprintf("%s %s", fillComment(1, comment), extra[i])))
			}
		}
		b.WriteString("\n")
	}

	switch f {
	case SQL, AlterSystemFormat:
		b.WriteString(AlterSystem(output))
		return b.String()
	case StackGres, StackGresShort, SGPGConfig, YAML:
		b.WriteString(SGConfigFile(output, fmt.Sprintf("%.f", pgVersion)))
		return b.String()
	case JSON:
		b.WriteString(JSONFile(output))
		return b.String()
	default:
		b.WriteString(ConfigFile(output))
		return b.String()
	}
}

func fillComment(qtd int, comment string) string {
	var b bytes.Buffer

	for i := 0; i < qtd; i++ {
		b.WriteString(comment)
	}

	return b.String()
}
