categories:
  memory_related:
    shared_buffers:
      abstract: This parameter allocate memory slots used by all process when the database starts. Mainly works as the disk cache and its similar to oracle's SGA buffer.
      recomendations:
        Tuning Your PostgreSQL Server: https://wiki.postgresql.org/wiki/Tuning_Your_PostgreSQL_Server#shared_buffers
        Tuning shared_buffers and wal_buffers: http://rhaas.blogspot.com.br/2012/03/tuning-sharedbuffers-and-walbuffers.html
    effective_cache_size:
      abstract: This parameter does not allocate any resource, just tells to the query planner how much of the operating system cache are avaliable to use. Remember that shared_buffers needs to smaller than 8GB, then the query planner will prefer read the disk because it will be on memory.
      recomendations:
          "effective_cache_size: A practical example": https://www.cybertec-postgresql.com/en/effective_cache_size-a-practical-example/
          "effective_cache_size: What it means in PostgreSQL": https://www.cybertec-postgresql.com/en/effective_cache_size-what-it-means-in-postgresql/
    work_mem:
      abstract: This parameter defines how much a work_mem buffer can allocate. Each query can open many work_mem buffers when execute (normally one by subquery) if it uses any sort (or aggregate) operation. When work_mem its too small a temp file is created.
      details:
          - Specifies the amount of memory to be used by internal sort operations and hash tables before writing to temporary disk files. The value defaults to four megabytes (4MB). Note that for a complex query, several sort or hash operations might be running in parallel; each operation will be allowed to use as much memory as this value specifies before it starts to write data into temporary files. Also, several running sessions could be doing such operations concurrently. Therefore, the total memory used could be many times the value of work_mem; it is necessary to keep this fact in mind when choosing the value. Sort operations are used for ORDER BY, DISTINCT, and merge joins. Hash tables are used in hash joins, hash-based aggregation, and hash-based processing of IN subqueries.
      recomendations:
        Configuring work_mem in Postgres: https://www.pgmustard.com/blog/work-mem
        "Understaning postgresql.conf: WORK_MEM": https://www.depesz.com/2011/07/03/understanding-postgresql-conf-work_mem/
    maintenance_work_mem:
      abstract: This parameter defines how much a maintenance operation (ALTER TABLE, VACUUM, REINDEX, AutoVACUUM worker, etc) buffer can use.
      recomendations:
        Adjusting maintenance_work_mem: https://www.cybertec-postgresql.com/en/adjusting-maintenance_work_mem/
        How Much maintenance_work_mem Do I Need?: http://rhaas.blogspot.com/2019/01/how-much-maintenanceworkmem-do-i-need.html
  checkpoint_related:
    min_wal_size:
      abstract: |
        This parameter defines the minimum size of the pg_wal directory. pg_wal directory contains the WAL files. 
        Older versions refer to it as the pg_xlog directory.
      recomendations:
        "Configuration changes in 9.5: transaction log size": http://www.databasesoup.com/2016/01/configuration-changes-in-95-transaction.html
    max_wal_size:
      abstract: |
        This parameter defines the maximun size of the pg_wal directory. pg_wal directory contains the WAL files.
        Older versions refer to it as the pg_xlog directory.
    checkpoint_completion_target:
      abstract: This parameter defines a percentual of checkpoint_timeout as a target to write the CHECKPOINT data on the disk.
      recomendations:
        "Understaning postgresql.conf: CHECKPOINT_COMPLETION_TARGET": https://www.depesz.com/2010/11/03/checkpoint_completion_target/
    wal_buffers:
      abstract: This parameter defines a buffer to store WAL changes before write it in the WAL file.
      recomendations:
        Chapter 9 - Write Ahead Logging â€” WAL: http://www.interdb.jp/pg/pgsql09.html
  network_related:
    listen_addresses:
      abstract: This parameter defines a network address to bind to.
    max_connections:
      abstract: This parameter defines a max connections allowed.
      recomendations:
        Tuning max_connections in PostgreSQL: https://www.cybertec-postgresql.com/en/tuning-max_connections-in-postgresql/
  storage_type:
    random_page_cost:
      abstract: Sets the planner's estimate of the cost of a non-sequentially-fetched disk page.
      recomendations:
        How a single PostgreSQL config change improved slow query performance by 50x: https://amplitude.engineering/how-a-single-postgresql-config-change-improved-slow-query-performance-by-50x-85593b8991b0
    effective_io_concurrency:
      abstract: Sets the number of concurrent disk I/O operations that PostgreSQL expects can be executed simultaneously.
      recomendations:
        "PostgreSQL: effective_io_concurrency benchmarked": https://portavita.github.io/2019-07-19-PostgreSQL_effective_io_concurrency_benchmarked/
